"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadBalancerNameFromListenerArn = exports.TargetGroupBase = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("@aws-cdk/core");
const elasticloadbalancingv2_generated_1 = require("../elasticloadbalancingv2.generated");
const enums_1 = require("./enums");
const util_1 = require("./util");
// keep this import separate from other imports to reduce chance for merge conflicts with v2-main
// eslint-disable-next-line no-duplicate-imports, import/order
const core_1 = require("@aws-cdk/core");
/**
 * Define the target of a load balancer
 */
class TargetGroupBase extends core_1.Construct {
    constructor(scope, id, baseProps, additionalProps) {
        super(scope, id);
        /**
         * Configurable dependable with all resources that lead to load balancer attachment
         */
        this.loadBalancerAttachedDependencies = new cdk.ConcreteDependable();
        /**
         * Attributes of this target group
         */
        this.attributes = {};
        /**
         * The JSON objects returned by the directly registered members of this target group
         */
        this.targetsJson = new Array();
        jsiiDeprecationWarnings._aws_cdk_aws_elasticloadbalancingv2_BaseTargetGroupProps(baseProps);
        if (baseProps.deregistrationDelay !== undefined) {
            this.setAttribute('deregistration_delay.timeout_seconds', baseProps.deregistrationDelay.toSeconds().toString());
        }
        this.healthCheck = baseProps.healthCheck || {};
        this.vpc = baseProps.vpc;
        this.targetType = baseProps.targetType;
        this.resource = new elasticloadbalancingv2_generated_1.CfnTargetGroup(this, 'Resource', {
            name: baseProps.targetGroupName,
            targetGroupAttributes: cdk.Lazy.any({ produce: () => util_1.renderAttributes(this.attributes) }, { omitEmptyArray: true }),
            targetType: cdk.Lazy.string({ produce: () => this.targetType }),
            targets: cdk.Lazy.any({ produce: () => this.targetsJson }, { omitEmptyArray: true }),
            vpcId: cdk.Lazy.string({ produce: () => this.vpc && this.targetType !== enums_1.TargetType.LAMBDA ? this.vpc.vpcId : undefined }),
            // HEALTH CHECK
            healthCheckEnabled: cdk.Lazy.any({ produce: () => { var _b; return (_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.enabled; } }),
            healthCheckIntervalSeconds: cdk.Lazy.number({
                produce: () => { var _b, _c; return (_c = (_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.interval) === null || _c === void 0 ? void 0 : _c.toSeconds(); },
            }),
            healthCheckPath: cdk.Lazy.string({ produce: () => { var _b; return (_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.path; } }),
            healthCheckPort: cdk.Lazy.string({ produce: () => { var _b; return (_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.port; } }),
            healthCheckProtocol: cdk.Lazy.string({ produce: () => { var _b; return (_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.protocol; } }),
            healthCheckTimeoutSeconds: cdk.Lazy.number({
                produce: () => { var _b, _c; return (_c = (_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.timeout) === null || _c === void 0 ? void 0 : _c.toSeconds(); },
            }),
            healthyThresholdCount: cdk.Lazy.number({ produce: () => { var _b; return (_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.healthyThresholdCount; } }),
            unhealthyThresholdCount: cdk.Lazy.number({ produce: () => { var _b; return (_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.unhealthyThresholdCount; } }),
            matcher: cdk.Lazy.any({
                produce: () => {
                    var _b, _c;
                    return ((_b = this.healthCheck) === null || _b === void 0 ? void 0 : _b.healthyHttpCodes) !== undefined || ((_c = this.healthCheck) === null || _c === void 0 ? void 0 : _c.healthyGrpcCodes) !== undefined ? {
                        grpcCode: this.healthCheck.healthyGrpcCodes,
                        httpCode: this.healthCheck.healthyHttpCodes,
                    } : undefined;
                },
            }),
            ...additionalProps,
        });
        this.targetGroupLoadBalancerArns = this.resource.attrLoadBalancerArns;
        this.targetGroupArn = this.resource.ref;
        this.targetGroupFullName = this.resource.attrTargetGroupFullName;
        this.loadBalancerArns = this.resource.attrLoadBalancerArns.toString();
        this.targetGroupName = this.resource.attrTargetGroupName;
        this.defaultPort = additionalProps.port;
    }
    /**
     * List of constructs that need to be depended on to ensure the TargetGroup is associated to a load balancer
     */
    get loadBalancerAttached() {
        return this.loadBalancerAttachedDependencies;
    }
    /**
     * Set/replace the target group's health check
     */
    configureHealthCheck(healthCheck) {
        jsiiDeprecationWarnings._aws_cdk_aws_elasticloadbalancingv2_HealthCheck(healthCheck);
        this.healthCheck = healthCheck;
    }
    /**
     * Set a non-standard attribute on the target group
     *
     * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes
     */
    setAttribute(key, value) {
        this.attributes[key] = value;
    }
    /**
     * Register the given load balancing target as part of this group
     */
    addLoadBalancerTarget(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_elasticloadbalancingv2_LoadBalancerTargetProps(props);
        if (this.targetType !== undefined && this.targetType !== props.targetType) {
            throw new Error(`Already have a of type '${this.targetType}', adding '${props.targetType}'; make all targets the same type.`);
        }
        this.targetType = props.targetType;
        if (this.targetType === enums_1.TargetType.LAMBDA && this.targetsJson.length >= 1) {
            throw new Error('TargetGroup can only contain one LAMBDA target. Create a new TargetGroup.');
        }
        if (props.targetJson) {
            this.targetsJson.push(props.targetJson);
        }
    }
    validate() {
        const ret = super.validate();
        if (this.targetType === undefined && this.targetsJson.length === 0) {
            cdk.Annotations.of(this).addWarning("When creating an empty TargetGroup, you should specify a 'targetType' (this warning may become an error in the future).");
        }
        if (this.targetType !== enums_1.TargetType.LAMBDA && this.vpc === undefined) {
            ret.push("'vpc' is required for a non-Lambda TargetGroup");
        }
        return ret;
    }
}
exports.TargetGroupBase = TargetGroupBase;
_a = JSII_RTTI_SYMBOL_1;
TargetGroupBase[_a] = { fqn: "@aws-cdk/aws-elasticloadbalancingv2.TargetGroupBase", version: "1.147.0" };
/**
 * Extract the full load balancer name (used for metrics) from the listener ARN:
 *
 * Turns
 *
 *     arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2
 *
 * Into
 *
 *     app/my-load-balancer/50dc6c495c0c9188
 */
function loadBalancerNameFromListenerArn(listenerArn) {
    const arnParts = cdk.Fn.split('/', listenerArn);
    return `${cdk.Fn.select(1, arnParts)}/${cdk.Fn.select(2, arnParts)}/${cdk.Fn.select(3, arnParts)}`;
}
exports.loadBalancerNameFromListenerArn = loadBalancerNameFromListenerArn;
//# sourceMappingURL=data:application/json;base64,