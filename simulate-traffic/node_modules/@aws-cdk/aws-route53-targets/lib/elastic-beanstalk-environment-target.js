"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElasticBeanstalkEnvironmentEndpointTarget = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("@aws-cdk/core");
const region_info_1 = require("@aws-cdk/region-info");
/**
 * Use an Elastic Beanstalk environment URL as an alias record target.
 * E.g. mysampleenvironment.xyz.us-east-1.elasticbeanstalk.com
 *
 * Only supports Elastic Beanstalk environments created after 2016 that have a regional endpoint.
 */
class ElasticBeanstalkEnvironmentEndpointTarget {
    constructor(environmentEndpoint) {
        this.environmentEndpoint = environmentEndpoint;
    }
    bind(_record, _zone) {
        if (cdk.Token.isUnresolved(this.environmentEndpoint)) {
            throw new Error('Cannot use an EBS alias as `environmentEndpoint`. You must find your EBS environment endpoint via the AWS console. See the Elastic Beanstalk developer guide: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customdomains.html');
        }
        const dnsName = this.environmentEndpoint;
        const region = cdk.Fn.select(2, cdk.Fn.split('.', dnsName));
        const { ebsEnvEndpointHostedZoneId: hostedZoneId } = region_info_1.RegionInfo.get(region);
        if (!hostedZoneId || !dnsName) {
            throw new Error(`Elastic Beanstalk environment target is not supported for the "${region}" region.`);
        }
        return {
            hostedZoneId,
            dnsName,
        };
    }
}
exports.ElasticBeanstalkEnvironmentEndpointTarget = ElasticBeanstalkEnvironmentEndpointTarget;
_a = JSII_RTTI_SYMBOL_1;
ElasticBeanstalkEnvironmentEndpointTarget[_a] = { fqn: "@aws-cdk/aws-route53-targets.ElasticBeanstalkEnvironmentEndpointTarget", version: "1.147.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxhc3RpYy1iZWFuc3RhbGstZW52aXJvbm1lbnQtdGFyZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWxhc3RpYy1iZWFuc3RhbGstZW52aXJvbm1lbnQtdGFyZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EscUNBQXFDO0FBQ3JDLHNEQUFrRDtBQUVsRDs7Ozs7R0FLRztBQUNILE1BQWEseUNBQXlDO0lBQ3BELFlBQTZCLG1CQUEyQjtRQUEzQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQVE7S0FDdkQ7SUFFTSxJQUFJLENBQUMsT0FBMkIsRUFBRSxLQUEyQjtRQUNsRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3BELE1BQU0sSUFBSSxLQUFLLENBQUMseU9BQXlPLENBQUMsQ0FBQztTQUM1UDtRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUN6QyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDNUQsTUFBTSxFQUFFLDBCQUEwQixFQUFFLFlBQVksRUFBRSxHQUFHLHdCQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVFLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsTUFBTSxXQUFXLENBQUMsQ0FBQztTQUN0RztRQUVELE9BQU87WUFDTCxZQUFZO1lBQ1osT0FBTztTQUNSLENBQUM7S0FDSDs7QUFyQkgsOEZBc0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm91dGU1MyBmcm9tICdAYXdzLWNkay9hd3Mtcm91dGU1Myc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBSZWdpb25JbmZvIH0gZnJvbSAnQGF3cy1jZGsvcmVnaW9uLWluZm8nO1xuXG4vKipcbiAqIFVzZSBhbiBFbGFzdGljIEJlYW5zdGFsayBlbnZpcm9ubWVudCBVUkwgYXMgYW4gYWxpYXMgcmVjb3JkIHRhcmdldC5cbiAqIEUuZy4gbXlzYW1wbGVlbnZpcm9ubWVudC54eXoudXMtZWFzdC0xLmVsYXN0aWNiZWFuc3RhbGsuY29tXG4gKlxuICogT25seSBzdXBwb3J0cyBFbGFzdGljIEJlYW5zdGFsayBlbnZpcm9ubWVudHMgY3JlYXRlZCBhZnRlciAyMDE2IHRoYXQgaGF2ZSBhIHJlZ2lvbmFsIGVuZHBvaW50LlxuICovXG5leHBvcnQgY2xhc3MgRWxhc3RpY0JlYW5zdGFsa0Vudmlyb25tZW50RW5kcG9pbnRUYXJnZXQgaW1wbGVtZW50cyByb3V0ZTUzLklBbGlhc1JlY29yZFRhcmdldCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZW52aXJvbm1lbnRFbmRwb2ludDogc3RyaW5nKSB7XG4gIH1cblxuICBwdWJsaWMgYmluZChfcmVjb3JkOiByb3V0ZTUzLklSZWNvcmRTZXQsIF96b25lPzogcm91dGU1My5JSG9zdGVkWm9uZSk6IHJvdXRlNTMuQWxpYXNSZWNvcmRUYXJnZXRDb25maWcge1xuICAgIGlmIChjZGsuVG9rZW4uaXNVbnJlc29sdmVkKHRoaXMuZW52aXJvbm1lbnRFbmRwb2ludCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSBhbiBFQlMgYWxpYXMgYXMgYGVudmlyb25tZW50RW5kcG9pbnRgLiBZb3UgbXVzdCBmaW5kIHlvdXIgRUJTIGVudmlyb25tZW50IGVuZHBvaW50IHZpYSB0aGUgQVdTIGNvbnNvbGUuIFNlZSB0aGUgRWxhc3RpYyBCZWFuc3RhbGsgZGV2ZWxvcGVyIGd1aWRlOiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vZWxhc3RpY2JlYW5zdGFsay9sYXRlc3QvZGcvY3VzdG9tZG9tYWlucy5odG1sJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZG5zTmFtZSA9IHRoaXMuZW52aXJvbm1lbnRFbmRwb2ludDtcbiAgICBjb25zdCByZWdpb24gPSBjZGsuRm4uc2VsZWN0KDIsIGNkay5Gbi5zcGxpdCgnLicsIGRuc05hbWUpKTtcbiAgICBjb25zdCB7IGVic0VudkVuZHBvaW50SG9zdGVkWm9uZUlkOiBob3N0ZWRab25lSWQgfSA9IFJlZ2lvbkluZm8uZ2V0KHJlZ2lvbik7XG5cbiAgICBpZiAoIWhvc3RlZFpvbmVJZCB8fCAhZG5zTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbGFzdGljIEJlYW5zdGFsayBlbnZpcm9ubWVudCB0YXJnZXQgaXMgbm90IHN1cHBvcnRlZCBmb3IgdGhlIFwiJHtyZWdpb259XCIgcmVnaW9uLmApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBob3N0ZWRab25lSWQsXG4gICAgICBkbnNOYW1lLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==