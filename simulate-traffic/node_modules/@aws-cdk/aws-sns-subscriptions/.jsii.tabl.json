{
  "version": "2",
  "toolVersion": "1.54.0",
  "snippets": {
    "9b3365b0b516f3f406547311fb9155a01fc5d7a33ff5432f1098fc522e7713e4": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 29
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "b66fe8ea2b4247d6f7531d3b1d4481f9f1a320fc968961a97a6478273e7bcb1d"
    },
    "3b4a129e1ea865e816668e13c4bdb5567da59db6b866cfb10e24c74fef37ffcb": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(\"https://foobar.com/\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 37
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "349109cb52053bc20d1e6fcbd72322066cefba44b6105d0686ed9364be241f9d"
    },
    "7ed66238a915019fe0d4117b757d70dc1897c710048ce146982d0c852b518f63": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\nurl = CfnParameter(self, \"url-param\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(url.value_as_string))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nCfnParameter url = new CfnParameter(this, \"url-param\");\n\nmyTopic.AddSubscription(new UrlSubscription(url.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nCfnParameter url = new CfnParameter(this, \"url-param\");\n\nmyTopic.addSubscription(new UrlSubscription(url.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\nconst url = new CfnParameter(this, 'url-param');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription(url.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 48
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\nconst url = new CfnParameter(this, 'url-param');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription(url.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "35bb5891b9d85f242d246da5e9c635005d8371ae6eac023a9e21e735ac4e4210"
    },
    "c179ec018819784d9c003621d0568d6b4de9364512a34c3728ea4631a1e3431f": {
      "translations": {
        "python": {
          "source": "my_queue = sqs.Queue(self, \"MyQueue\")\nmy_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.SqsSubscription(my_queue))",
          "version": "2"
        },
        "csharp": {
          "source": "Queue myQueue = new Queue(this, \"MyQueue\");\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new SqsSubscription(myQueue));",
          "version": "1"
        },
        "java": {
          "source": "Queue myQueue = new Queue(this, \"MyQueue\");\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new SqsSubscription(myQueue));",
          "version": "1"
        },
        "$": {
          "source": "const myQueue = new sqs.Queue(this, 'MyQueue');\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(myQueue));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 59
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SqsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myQueue = new sqs.Queue(this, 'MyQueue');\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(myQueue));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "d9ca6824475b60b688d4d729947dd9cefc3e41800f2e64003f6ab2cbf53a5d8e"
    },
    "41cf3e91f1e955b71deb95ce41cb1db22d64be929b774a373fcc9073d3796b70": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# my_function: lambda.Function\n\n\nmy_topic = sns.Topic(self, \"myTopic\")\nmy_topic.add_subscription(subscriptions.LambdaSubscription(my_function))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction myFunction;\n\n\nTopic myTopic = new Topic(this, \"myTopic\");\nmyTopic.AddSubscription(new LambdaSubscription(myFunction));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction myFunction;\n\n\nTopic myTopic = new Topic(this, \"myTopic\");\nmyTopic.addSubscription(new LambdaSubscription(myFunction));",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'myTopic');\ndeclare const myFunction: lambda.Function;\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(myFunction));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 76
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'myTopic');\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(myFunction));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "01c2cdcdc7804039c3aafd7e27167af2518fdf828f37cf50e340493ec69c1bac"
    },
    "2b67aa0f3757e800fc0c1c22636ffdfb57fea49967be36859d6e8f400395e93e": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\nmy_topic.add_subscription(subscriptions.EmailSubscription(\"foo@bar.com\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nmyTopic.AddSubscription(new EmailSubscription(\"foo@bar.com\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nmyTopic.addSubscription(new EmailSubscription(\"foo@bar.com\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\nmyTopic.addSubscription(new subscriptions.EmailSubscription('foo@bar.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 88
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.EmailSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\nmyTopic.addSubscription(new subscriptions.EmailSubscription('foo@bar.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "883235ac8e40f832e23642c578b921e432d8918eea3d961ff97cfa80e58640e1"
    },
    "ccb1682470afb3f95d509ec23552acfd02b418f0b612389b815323d75ae75b69": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\nemail_address = CfnParameter(self, \"email-param\")\n\nmy_topic.add_subscription(subscriptions.EmailSubscription(email_address.value_as_string))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter emailAddress = new CfnParameter(this, \"email-param\");\n\nmyTopic.AddSubscription(new EmailSubscription(emailAddress.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter emailAddress = new CfnParameter(this, \"email-param\");\n\nmyTopic.addSubscription(new EmailSubscription(emailAddress.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\nconst emailAddress = new CfnParameter(this, 'email-param');\n\nmyTopic.addSubscription(new subscriptions.EmailSubscription(emailAddress.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 98
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.EmailSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\nconst emailAddress = new CfnParameter(this, 'email-param');\n\nmyTopic.addSubscription(new subscriptions.EmailSubscription(emailAddress.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "f80e7daa025c4a379ff9df8f1ce7b930f0b16c6d5335bc2d490d4356faedc9b3"
    },
    "c4739a06bd84768cf5ba449d0b60f337d00fd78c0434201ca05c3d684735ad16": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\n\nmy_topic.add_subscription(subscriptions.SmsSubscription(\"+15551231234\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\n\nmyTopic.AddSubscription(new SmsSubscription(\"+15551231234\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\n\nmyTopic.addSubscription(new SmsSubscription(\"+15551231234\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 112
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SmsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "fd0418875cf3af76a9d0b978eef3cb41563d889c367eaefd0426e409a1575d6a"
    },
    "8e8f301b4e7e195059248abb88cbf9003617b0b86ac76260b20c64a86e7b9cf5": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\nsms_number = CfnParameter(self, \"sms-param\")\n\nmy_topic.add_subscription(subscriptions.SmsSubscription(sms_number.value_as_string))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter smsNumber = new CfnParameter(this, \"sms-param\");\n\nmyTopic.AddSubscription(new SmsSubscription(smsNumber.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter smsNumber = new CfnParameter(this, \"sms-param\");\n\nmyTopic.addSubscription(new SmsSubscription(smsNumber.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\nconst smsNumber = new CfnParameter(this, 'sms-param');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription(smsNumber.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 123
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SmsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\nconst smsNumber = new CfnParameter(this, 'sms-param');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription(smsNumber.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "92f8f21226a762e1cb3bd0c10c0eefd24a9e2fc60c683f051735fecf30c05ddd"
    },
    "add82c474b189ca8363addd16cdb05177b55c883778d731d1e06dd240dcf7ebd": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\nemail_address = CfnParameter(self, \"email-param\")\n\nmy_topic.add_subscription(subscriptions.EmailSubscription(email_address.value_as_string))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter emailAddress = new CfnParameter(this, \"email-param\");\n\nmyTopic.AddSubscription(new EmailSubscription(emailAddress.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter emailAddress = new CfnParameter(this, \"email-param\");\n\nmyTopic.addSubscription(new EmailSubscription(emailAddress.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\nconst emailAddress = new CfnParameter(this, 'email-param');\n\nmyTopic.addSubscription(new subscriptions.EmailSubscription(emailAddress.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.EmailSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.EmailSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\nconst emailAddress = new CfnParameter(this, 'email-param');\n\nmyTopic.addSubscription(new subscriptions.EmailSubscription(emailAddress.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "f80e7daa025c4a379ff9df8f1ce7b930f0b16c6d5335bc2d490d4356faedc9b3"
    },
    "ecf1ba7bb7a40baca0dc74153f7276e19a76ebe7738c451d4398298c1c4b32ff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_sns_subscriptions as sns_subscriptions\nimport aws_cdk.aws_sqs as sqs\n\n# queue: sqs.Queue\n# subscription_filter: sns.SubscriptionFilter\n\nemail_subscription_props = sns_subscriptions.EmailSubscriptionProps(\n    dead_letter_queue=queue,\n    filter_policy={\n        \"filter_policy_key\": subscription_filter\n    },\n    json=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.SNS.Subscriptions;\nusing Amazon.CDK.AWS.SQS;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nEmailSubscriptionProps emailSubscriptionProps = new EmailSubscriptionProps {\n    DeadLetterQueue = queue,\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"filterPolicyKey\", subscriptionFilter }\n    },\n    Json = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.sns.subscriptions.*;\nimport software.amazon.awscdk.services.sqs.*;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nEmailSubscriptionProps emailSubscriptionProps = EmailSubscriptionProps.builder()\n        .deadLetterQueue(queue)\n        .filterPolicy(Map.of(\n                \"filterPolicyKey\", subscriptionFilter))\n        .json(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\nconst emailSubscriptionProps: sns_subscriptions.EmailSubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n  json: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.EmailSubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.EmailSubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst emailSubscriptionProps: sns_subscriptions.EmailSubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n  json: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b8fcb5145ae83bdfbc0dd64552cb2fb462dc8ecd14f22de8f1742d615c52ea2b"
    },
    "f99f142a0061092d21483a8e177670bec399468591b00c4fe65f5613c3417e8a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn: lambda.Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.LambdaSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "557648197c579f4ba78b3906db2f0154b8667ef0ccebf5408675d353fc34a544"
    },
    "c1cf045bb87ee13ce2b83ec8e7ee134717581c05e272f71e50be3948efffbc45": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn: lambda.Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "557648197c579f4ba78b3906db2f0154b8667ef0ccebf5408675d353fc34a544"
    },
    "09befa91b21168c1918ff559193c3c7e98ca19bbd582346e97ebcfda34be9a7c": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\n\nmy_topic.add_subscription(subscriptions.SmsSubscription(\"+15551231234\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\n\nmyTopic.AddSubscription(new SmsSubscription(\"+15551231234\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\n\nmyTopic.addSubscription(new SmsSubscription(\"+15551231234\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.SmsSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SmsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "fd0418875cf3af76a9d0b978eef3cb41563d889c367eaefd0426e409a1575d6a"
    },
    "7d5e1957b98a3fd5733d2107ccf9e9f36ef21211c47fe7c42181d1e38f03816e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_sns_subscriptions as sns_subscriptions\nimport aws_cdk.aws_sqs as sqs\n\n# queue: sqs.Queue\n# subscription_filter: sns.SubscriptionFilter\n\nsms_subscription_props = sns_subscriptions.SmsSubscriptionProps(\n    dead_letter_queue=queue,\n    filter_policy={\n        \"filter_policy_key\": subscription_filter\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.SNS.Subscriptions;\nusing Amazon.CDK.AWS.SQS;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nSmsSubscriptionProps smsSubscriptionProps = new SmsSubscriptionProps {\n    DeadLetterQueue = queue,\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"filterPolicyKey\", subscriptionFilter }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.sns.subscriptions.*;\nimport software.amazon.awscdk.services.sqs.*;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nSmsSubscriptionProps smsSubscriptionProps = SmsSubscriptionProps.builder()\n        .deadLetterQueue(queue)\n        .filterPolicy(Map.of(\n                \"filterPolicyKey\", subscriptionFilter))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\nconst smsSubscriptionProps: sns_subscriptions.SmsSubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.SmsSubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SmsSubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst smsSubscriptionProps: sns_subscriptions.SmsSubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f2e4d0687cea75c0546dd921f197c43edfa09bcf34156bca69e097ed567bc41e"
    },
    "3c42a2514e26b094bc5f3b561e8725ed1716b38d52c4126cb57072720928cdbe": {
      "translations": {
        "python": {
          "source": "# queue: sqs.Queue\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.SqsSubscription(queue))",
          "version": "2"
        },
        "csharp": {
          "source": "Queue queue;\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new SqsSubscription(queue));",
          "version": "1"
        },
        "java": {
          "source": "Queue queue;\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new SqsSubscription(queue));",
          "version": "1"
        },
        "$": {
          "source": "declare const queue: sqs.Queue;\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(queue));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.SqsSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SqsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/aws-sqs.IQueue",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const queue: sqs.Queue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(queue));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "b69dd28b38a2cef232e84ffd0ddef0ec748c91a5a0556e237c561a6a229c66da"
    },
    "469c9019dbfeb3ee7226f674c9012815be46feb5e53926d26102591efcb14890": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_sns_subscriptions as sns_subscriptions\nimport aws_cdk.aws_sqs as sqs\n\n# queue: sqs.Queue\n# subscription_filter: sns.SubscriptionFilter\n\nsqs_subscription_props = sns_subscriptions.SqsSubscriptionProps(\n    dead_letter_queue=queue,\n    filter_policy={\n        \"filter_policy_key\": subscription_filter\n    },\n    raw_message_delivery=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.SNS.Subscriptions;\nusing Amazon.CDK.AWS.SQS;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nSqsSubscriptionProps sqsSubscriptionProps = new SqsSubscriptionProps {\n    DeadLetterQueue = queue,\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"filterPolicyKey\", subscriptionFilter }\n    },\n    RawMessageDelivery = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.sns.subscriptions.*;\nimport software.amazon.awscdk.services.sqs.*;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nSqsSubscriptionProps sqsSubscriptionProps = SqsSubscriptionProps.builder()\n        .deadLetterQueue(queue)\n        .filterPolicy(Map.of(\n                \"filterPolicyKey\", subscriptionFilter))\n        .rawMessageDelivery(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\nconst sqsSubscriptionProps: sns_subscriptions.SqsSubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n  rawMessageDelivery: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.SqsSubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SqsSubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sqsSubscriptionProps: sns_subscriptions.SqsSubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n  rawMessageDelivery: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9a58cda6301887e99bb3b89d6b8e29be957ce3bbd2456dfdb6fbd0ba6adf0cd8"
    },
    "4250b60ed21b2b361ececad3ceb2f17319da33d216acd1e80979e0510d5d00e7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_sns_subscriptions as sns_subscriptions\nimport aws_cdk.aws_sqs as sqs\n\n# queue: sqs.Queue\n# subscription_filter: sns.SubscriptionFilter\n\nsubscription_props = sns_subscriptions.SubscriptionProps(\n    dead_letter_queue=queue,\n    filter_policy={\n        \"filter_policy_key\": subscription_filter\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.SNS.Subscriptions;\nusing Amazon.CDK.AWS.SQS;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nSubscriptionProps subscriptionProps = new SubscriptionProps {\n    DeadLetterQueue = queue,\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"filterPolicyKey\", subscriptionFilter }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.sns.subscriptions.*;\nimport software.amazon.awscdk.services.sqs.*;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nSubscriptionProps subscriptionProps = SubscriptionProps.builder()\n        .deadLetterQueue(queue)\n        .filterPolicy(Map.of(\n                \"filterPolicyKey\", subscriptionFilter))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\nconst subscriptionProps: sns_subscriptions.SubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.SubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subscriptionProps: sns_subscriptions.SubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "452bb26cf238d150359f5967f76e07b99f65637812fa8be5bc813604b0c8d15e"
    },
    "9b338fbb1a2988613373399dfc81778c10c5aefcb2b2c7b22c74a4cfd7206765": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(\"https://foobar.com/\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.UrlSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "349109cb52053bc20d1e6fcbd72322066cefba44b6105d0686ed9364be241f9d"
    },
    "cd96a1baba055bf3acdfb79360e238f6bf97eaeda83a7439eabb6dffea3af669": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_sns_subscriptions as sns_subscriptions\nimport aws_cdk.aws_sqs as sqs\n\n# queue: sqs.Queue\n# subscription_filter: sns.SubscriptionFilter\n\nurl_subscription_props = sns_subscriptions.UrlSubscriptionProps(\n    dead_letter_queue=queue,\n    filter_policy={\n        \"filter_policy_key\": subscription_filter\n    },\n    protocol=sns.SubscriptionProtocol.HTTP,\n    raw_message_delivery=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.SNS.Subscriptions;\nusing Amazon.CDK.AWS.SQS;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nUrlSubscriptionProps urlSubscriptionProps = new UrlSubscriptionProps {\n    DeadLetterQueue = queue,\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"filterPolicyKey\", subscriptionFilter }\n    },\n    Protocol = SubscriptionProtocol.HTTP,\n    RawMessageDelivery = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.sns.subscriptions.*;\nimport software.amazon.awscdk.services.sqs.*;\n\nQueue queue;\nSubscriptionFilter subscriptionFilter;\n\nUrlSubscriptionProps urlSubscriptionProps = UrlSubscriptionProps.builder()\n        .deadLetterQueue(queue)\n        .filterPolicy(Map.of(\n                \"filterPolicyKey\", subscriptionFilter))\n        .protocol(SubscriptionProtocol.HTTP)\n        .rawMessageDelivery(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\nconst urlSubscriptionProps: sns_subscriptions.UrlSubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n  protocol: sns.SubscriptionProtocol.HTTP,\n  rawMessageDelivery: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.UrlSubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionProtocol",
        "@aws-cdk/aws-sns.SubscriptionProtocol#HTTP",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sns_subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const subscriptionFilter: sns.SubscriptionFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst urlSubscriptionProps: sns_subscriptions.UrlSubscriptionProps = {\n  deadLetterQueue: queue,\n  filterPolicy: {\n    filterPolicyKey: subscriptionFilter,\n  },\n  protocol: sns.SubscriptionProtocol.HTTP,\n  rawMessageDelivery: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 22,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "592beb8ec3484e76ea96315c458d1f953ca5ec0030fa8df6fa16ff911d13792b"
    }
  }
}
